name: Build & Upload iOS App

# ÂèØÊâãÂä®Ëß¶ÂèëÔºå‰πüÂèØËá™Âä®Ëß¶ÂèëÔºàÂ¶Ç push Âà∞ mainÔºâ
on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  # ‚úÖ Ê†∏ÂøÉÊûÑÂª∫ÂèÇÊï∞ÔºàÂèØÁõ¥Êé•ÂÜôÊ≠ªÔºåÊàñ‰ªé secrets ÂºïÁî®Ôºâ
  APP_ID: ${{ secrets.APP_ID || 'com.bto.Light' }}
  APP_NAME: ${{ secrets.APP_NAME || 'BTOLIGHT' }}
  VERSION_NUMBER: ${{ secrets.VERSION_NUMBER || '2.9.0' }}
  BUILD_NUMBER: ${{ secrets.BUILD_NUMBER || github.run_number }}
  BUILD_TYPE: ${{ secrets.BUILD_TYPE || 'AppStore' }}

  # ‚úÖ Á≠æÂêç & Âõ¢Èòü
  TEAM_ID: ${{ secrets.TEAM_ID }}
  PROVISIONING_PROFILE_SPECIFIER: ${{ secrets.PROVISIONING_PROFILE_SPECIFIER || 'BTOLIGHT' }}
  CODE_SIGN_IDENTITY: ${{ secrets.CODE_SIGN_IDENTITY || 'Apple Distribution' }}

  # ‚úÖ ËØÅ‰π¶Âíå ProfileÔºàBase64 ÁºñÁ†ÅÔºâ
  SIGNING_CERTIFICATE_P12_DATA: ${{ secrets.SIGNING_CERTIFICATE_P12_DATA }}
  SIGNING_CERTIFICATE_PASSWORD: ${{ secrets.SIGNING_CERTIFICATE_PASSWORD }}
  PROVISIONING_PROFILE_DATA: ${{ secrets.PROVISIONING_PROFILE_DATA }}

  # ‚úÖ App Store Connect
  APP_STORE_CONNECT_USERNAME: ${{ secrets.APP_STORE_CONNECT_USERNAME }}
  APP_STORE_CONNECT_PASSWORD: ${{ secrets.APP_STORE_CONNECT_PASSWORD }}

jobs:
  build-ios:
    runs-on: macos-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22

      - name: Set up pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 'latest'

      - name: Get pnpm store directory
        id: pnpm-cache
        run: |
          echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install React Native Dependencies
        run: |
          pnpm install --frozen-lockfile

      - name: Install Ruby and Bundler
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: 3.3.0
          bundler-cache: true

      # ‚úÖ ÊîπËøõÁöÑ‰ª£Á†ÅÁ≠æÂêçËÆæÁΩÆ
      - name: Setup iOS Code Signing
        if: ${{ env.SIGNING_CERTIFICATE_P12_DATA != '' && env.PROVISIONING_PROFILE_DATA != '' }}
        run: |
          # ÂàõÂª∫‰∏¥Êó∂ÁõÆÂΩï
          mkdir -p ~/certs
          
          # È™åËØÅÁéØÂ¢ÉÂèòÈáè
          echo "üîç Checking certificate data..."
          if [ -z "$SIGNING_CERTIFICATE_P12_DATA" ]; then
            echo "‚ùå SIGNING_CERTIFICATE_P12_DATA is empty"
            exit 1
          fi
          
          if [ -z "$SIGNING_CERTIFICATE_PASSWORD" ]; then
            echo "‚ùå SIGNING_CERTIFICATE_PASSWORD is empty"
            exit 1
          fi
          
          # Ëß£Á†ÅÂπ∂ÂÜôÂÖ•ËØÅ‰π¶
          echo "üìù Decoding certificate..."
          echo "$SIGNING_CERTIFICATE_P12_DATA" | base64 --decode > ~/certs/cert.p12
          
          # È™åËØÅËØÅ‰π¶Êñá‰ª∂
          echo "üîç Verifying certificate file..."
          if [ ! -f ~/certs/cert.p12 ]; then
            echo "‚ùå Certificate file was not created"
            exit 1
          fi
          
          file_size=$(stat -f%z ~/certs/cert.p12)
          echo "üìä Certificate file size: $file_size bytes"
          
          if [ $file_size -eq 0 ]; then
            echo "‚ùå Certificate file is empty"
            exit 1
          fi
          
          # Ëß£Á†ÅÂπ∂ÂÜôÂÖ• Provisioning Profile
          echo "üìù Decoding provisioning profile..."
          echo "$PROVISIONING_PROFILE_DATA" | base64 --decode > ~/certs/profile.mobileprovision
          
          # ÂàõÂª∫‰∏¥Êó∂Èí•Âåô‰∏≤
          echo "üîê Creating temporary keychain..."
          security create-keychain -p "" build.keychain
          security default-keychain -s build.keychain
          security unlock-keychain -p "" build.keychain
          security set-keychain-settings -t 3600 -u build.keychain
          
          # Â∞ùËØïÂØºÂÖ•ËØÅ‰π¶Âà∞Èí•Âåô‰∏≤
          echo "üì• Importing certificate to keychain..."
          if ! security import ~/certs/cert.p12 -k build.keychain -P "$SIGNING_CERTIFICATE_PASSWORD" -T /usr/bin/codesign; then
            echo "‚ùå Failed to import certificate. Possible causes:"
            echo "   1. Wrong password for the .p12 file"
            echo "   2. Corrupted certificate data"
            echo "   3. Invalid Base64 encoding"
            exit 1
          fi
          
          security set-key-partition-list -S apple-tool:,apple: -s -k "" build.keychain
          
          # ÂÆâË£Ö Provisioning Profile
          echo "üì± Installing provisioning profile..."
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          cp ~/certs/profile.mobileprovision ~/Library/MobileDevice/Provisioning\ Profiles/
          
          echo "‚úÖ Code signing setup completed successfully"

      - name: Install CocoaPods Dependencies
        working-directory: ./ios
        run: |
          pod install --repo-update

      # ‚úÖ Ê∑ªÂä†ËØ¶ÁªÜÁöÑÊûÑÂª∫ÂâçÊ£ÄÊü•
      - name: Pre-build Checks
        working-directory: ./ios
        run: |
          echo "üîç Pre-build environment checks..."
          echo "üì± Available schemes:"
          xcodebuild -list -workspace taroApp.xcworkspace
          echo ""
          echo "üîê Available code signing identities:"
          security find-identity -v -p codesigning
          echo ""
          echo "üìã Available provisioning profiles:"
          ls -la ~/Library/MobileDevice/Provisioning\ Profiles/ || echo "No provisioning profiles found"
          echo ""
          echo "üéØ Build configuration:"
          echo "  APP_ID: $APP_ID"
          echo "  APP_NAME: $APP_NAME"
          echo "  VERSION_NUMBER: $VERSION_NUMBER"
          echo "  BUILD_NUMBER: $BUILD_NUMBER"
          echo "  BUILD_TYPE: $BUILD_TYPE"
          echo "  TEAM_ID: $TEAM_ID"
          echo "  CODE_SIGN_IDENTITY: $CODE_SIGN_IDENTITY"
          echo "  PROVISIONING_PROFILE_SPECIFIER: $PROVISIONING_PROFILE_SPECIFIER"

      # ‚úÖ ‰øÆÊîπÊûÑÂª∫Ê≠•È™§Ôºå‰ΩøÁî®Êñ∞ÁöÑ lane ÂêçÁß∞
      - name: Build iOS App with Fastlane (Verbose)
        working-directory: ./ios
        run: |
          echo "üöÄ Starting iOS build with detailed logging..."
          # ËÆæÁΩÆËØ¶ÁªÜÊó•ÂøóËæìÂá∫
          export FASTLANE_VERBOSE=1
          export FASTLANE_HIDE_GITHUB_ISSUES=1
          export FASTLANE_SKIP_UPDATE_CHECK=1
          
          # ËøêË°å fastlane ÊûÑÂª∫Ôºà‰ΩøÁî®Êñ∞ÁöÑ lane ÂêçÁß∞Ôºâ
          bundle exec fastlane build_ios_app --verbose
        continue-on-error: true

      # ‚úÖ Â¶ÇÊûúÊûÑÂª∫Â§±Ë¥•ÔºåÂ∞ùËØïËé∑ÂèñËØ¶ÁªÜÊó•Âøó
      - name: Capture Build Logs on Failure
        if: failure()
        run: |
          echo "‚ùå Build failed. Capturing detailed logs..."
          echo ""
          echo "üìã Gym logs:"
          find ~/Library/Logs -name "*taroApp*" -type f 2>/dev/null | head -5 | while read logfile; do
            echo "=== $logfile ==="
            tail -100 "$logfile" 2>/dev/null || echo "Could not read $logfile"
            echo ""
          done
          
          echo "üìã Xcode build logs:"
          find ~/Library/Developer/Xcode/DerivedData -name "*.log" -type f 2>/dev/null | head -3 | while read logfile; do
            echo "=== $logfile ==="
            tail -50 "$logfile" 2>/dev/null || echo "Could not read $logfile"
            echo ""
          done

      - name: Upload to TestFlight (if AppStore build)
        if: ${{ env.BUILD_TYPE == 'AppStore' && success() }}
        working-directory: ./ios
        run: |
          bundle exec fastlane upload_testflight

      - name: Upload Artifact (IPA)
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.APP_NAME }}-${{ env.BUILD_TYPE }}-${{ env.VERSION_NUMBER }}-${{ env.BUILD_NUMBER }}
          path: ios/*.ipa

      # ‚úÖ ‰∏ä‰º†ÊûÑÂª∫Êó•Âøó‰Ωú‰∏∫ artifact
      - name: Upload Build Logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: build-logs-${{ github.run_number }}
          path: |
            ~/Library/Logs/gym/*.log
            ~/Library/Developer/Xcode/DerivedData/**/Logs/**/*.log
          if-no-files-found: ignore

      # ‚úÖ Ê∏ÖÁêÜÈí•Âåô‰∏≤
      - name: Cleanup
        if: always()
        run: |
          security delete-keychain build.keychain || true
          rm -rf ~/certs || true
