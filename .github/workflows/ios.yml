name: iOS Build & Deploy

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      build_type:
        description: '构建类型'
        required: true
        default: 'beta'
        type: choice
        options:
        - beta
        - release
      skip_tests:
        description: '跳过测试'
        required: false
        default: false
        type: boolean

env:
  # 应用配置
  APP_ID: ${{ secrets.APP_ID || 'com.bto.Light' }}
  APP_NAME: ${{ secrets.APP_NAME || 'BTOLIGHT' }}
  SCHEME_NAME: 'taroApp'
  
  # 版本配置
  VERSION_NUMBER: ${{ secrets.VERSION_NUMBER || '2.9.0' }}
  BUILD_NUMBER: ${{ github.run_number }}
  
  # 签名配置
  TEAM_ID: ${{ secrets.TEAM_ID }}
  PROVISIONING_PROFILE_SPECIFIER: ${{ secrets.PROVISIONING_PROFILE_SPECIFIER }}
  CODE_SIGN_IDENTITY: ${{ secrets.CODE_SIGN_IDENTITY || 'Apple Distribution' }}
  
  # 证书和配置文件 (Base64编码)
  SIGNING_CERTIFICATE_P12_DATA: ${{ secrets.SIGNING_CERTIFICATE_P12_DATA }}
  SIGNING_CERTIFICATE_PASSWORD: ${{ secrets.SIGNING_CERTIFICATE_PASSWORD }}
  PROVISIONING_PROFILE_DATA: ${{ secrets.PROVISIONING_PROFILE_DATA }}
  
  # App Store Connect API
  APP_STORE_CONNECT_API_KEY_ID: ${{ secrets.APP_STORE_CONNECT_API_KEY_ID }}
  APP_STORE_CONNECT_ISSUER_ID: ${{ secrets.APP_STORE_CONNECT_ISSUER_ID }}
  APP_STORE_CONNECT_API_KEY_CONTENT: ${{ secrets.APP_STORE_CONNECT_API_KEY_CONTENT }}
  
  # Fastlane配置
  FASTLANE_SKIP_UPDATE_CHECK: true
  FASTLANE_HIDE_GITHUB_ISSUES: true
  FASTLANE_DISABLE_COLORS: true

jobs:
  build-ios:
    name: Build iOS App
    runs-on: macos-14
    timeout-minutes: 60
    
    steps:
    - name: 📥 Checkout Repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: 🏷️ Get Version Info
      id: version
      run: |
        if [[ $GITHUB_REF == refs/tags/* ]]; then
          VERSION=${GITHUB_REF#refs/tags/v}
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "is_release=true" >> $GITHUB_OUTPUT
        else
          echo "version=$VERSION_NUMBER" >> $GITHUB_OUTPUT
          echo "is_release=false" >> $GITHUB_OUTPUT
        fi
        echo "build_number=$BUILD_NUMBER" >> $GITHUB_OUTPUT
        
    - name: 📦 Setup pnpm
      uses: pnpm/action-setup@v2
      with:
        version: latest
        
    - name: 🟢 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'pnpm'
        
    - name: 💎 Setup Ruby
      uses: ruby/setup-ruby@v1
      with:
        ruby-version: '3.2'
        bundler-cache: true
        working-directory: ios
        
    - name: 📱 Setup Xcode
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: '15.2'
        
    - name: 🔧 Install Dependencies
      run: |
        echo "📦 Installing Node.js dependencies..."
        pnpm install --frozen-lockfile
        
        echo "💎 Installing Ruby dependencies..."
        cd ios && bundle install
        
    - name: 🏗️ Build Taro RN Bundle
      run: |
        echo "🏗️ Building Taro React Native bundle..."
        pnpm run build:rn
        
    - name: 🍎 Install CocoaPods Dependencies
      run: |
        cd ios
        echo "🍎 Installing CocoaPods dependencies..."
        pod install --repo-update --clean-install
        
    - name: 🔐 Setup Keychain
      run: |
        echo "🔐 Setting up build keychain..."
        KEYCHAIN_PASSWORD="${{ secrets.KEYCHAIN_PASSWORD || 'temp_keychain_password' }}"
        
        # 创建临时keychain
        security create-keychain -p "$KEYCHAIN_PASSWORD" build.keychain
        security default-keychain -s build.keychain
        security unlock-keychain -p "$KEYCHAIN_PASSWORD" build.keychain
        security set-keychain-settings -t 3600 -u build.keychain
        
    - name: 📜 Import Certificate
      run: |
        echo "📜 Importing signing certificate..."
        if [ -z "$SIGNING_CERTIFICATE_P12_DATA" ]; then
          echo "❌ SIGNING_CERTIFICATE_P12_DATA is not set"
          exit 1
        fi
        
        # 解码并导入证书
        echo "$SIGNING_CERTIFICATE_P12_DATA" | base64 --decode > certificate.p12
        security import certificate.p12 \
          -k build.keychain \
          -P "$SIGNING_CERTIFICATE_PASSWORD" \
          -T /usr/bin/codesign \
          -T /usr/bin/security
          
        # 设置证书访问权限
        security set-key-partition-list \
          -S apple-tool:,apple:,codesign: \
          -s -k "${{ secrets.KEYCHAIN_PASSWORD || 'temp_keychain_password' }}" \
          build.keychain
          
        # 清理证书文件
        rm certificate.p12
        
    - name: 📋 Import Provisioning Profile
      run: |
        echo "📋 Importing provisioning profile..."
        if [ -z "$PROVISIONING_PROFILE_DATA" ]; then
          echo "❌ PROVISIONING_PROFILE_DATA is not set"
          exit 1
        fi
        
        # 创建配置文件目录
        mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
        
        # 解码并保存配置文件
        echo "$PROVISIONING_PROFILE_DATA" | base64 --decode > profile.mobileprovision
        
        # 获取配置文件UUID
        PROFILE_UUID=$(security cms -D -i profile.mobileprovision | plutil -extract UUID xml1 - -o - | sed -n 's/.*<string>\(.*\)<\/string>.*/\1/p')
        
        # 复制到正确位置
        cp profile.mobileprovision ~/Library/MobileDevice/Provisioning\ Profiles/$PROFILE_UUID.mobileprovision
        
        echo "✅ Provisioning profile installed with UUID: $PROFILE_UUID"
        rm profile.mobileprovision
        
    - name: 🔑 Setup App Store Connect API Key
      run: |
        echo "🔑 Setting up App Store Connect API key..."
        if [ -n "$APP_STORE_CONNECT_API_KEY_CONTENT" ]; then
          mkdir -p ~/.appstoreconnect/private_keys
          echo "$APP_STORE_CONNECT_API_KEY_CONTENT" | base64 --decode > ~/.appstoreconnect/private_keys/AuthKey_$APP_STORE_CONNECT_API_KEY_ID.p8
          echo "✅ App Store Connect API key configured"
        else
          echo "⚠️ App Store Connect API key not provided"
        fi
        
    - name: 🧪 Run Tests
      if: ${{ !inputs.skip_tests }}
      run: |
        cd ios
        echo "🧪 Running iOS tests..."
        bundle exec fastlane test
        
    - name: 🚀 Build and Deploy
      run: |
        cd ios
        
        # 确定构建类型
        if [[ "${{ steps.version.outputs.is_release }}" == "true" ]] || [[ "${{ github.event.inputs.build_type }}" == "release" ]]; then
          echo "🚀 Building for App Store release..."
          bundle exec fastlane release
        else
          echo "🧪 Building beta version..."
          bundle exec fastlane beta
        fi
      env:
        VERSION_NUMBER: ${{ steps.version.outputs.version }}
        BUILD_NUMBER: ${{ steps.version.outputs.build_number }}
        SKIP_GIT_CHECK: true
        CI: true
        
    - name: 📊 Upload Build Artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: ios-build-artifacts-${{ github.run_number }}
        path: |
          ios/build/
          ios/fastlane/report.xml
          ios/fastlane/test_output/
          ios/fastlane/screenshots/
          ios/gym/
        retention-days: 30
        
    - name: 📝 Upload Logs
      uses: actions/upload-artifact@v4
      if: failure()
      with:
        name: ios-build-logs-${{ github.run_number }}
        path: |
          ios/fastlane/logs/
          ~/Library/Logs/gym/
          ~/Library/Developer/Xcode/DerivedData/
        retention-days: 7
        
    - name: 🧹 Cleanup
      if: always()
      run: |
        echo "🧹 Cleaning up..."
        
        # 删除keychain
        security delete-keychain build.keychain || true
        
        # 清理配置文件
        rm -rf ~/Library/MobileDevice/Provisioning\ Profiles/*.mobileprovision || true
        
        # 清理API密钥
        rm -rf ~/.appstoreconnect/private_keys/AuthKey_*.p8 || true
        
        echo "✅ Cleanup completed"
        
    - name: 📢 Notify Success
      if: success()
      run: |
        echo "🎉 iOS build completed successfully!"
        echo "📱 App: $APP_NAME"
        echo "🏷️ Version: ${{ steps.version.outputs.version }}"
        echo "🔢 Build: ${{ steps.version.outputs.build_number }}"
        
    - name: 📢 Notify Failure
      if: failure()
      run: |
        echo "❌ iOS build failed!"
        echo "📱 App: $APP_NAME"
        echo "🏷️ Version: ${{ steps.version.outputs.version }}"
        echo "🔢 Build: ${{ steps.version.outputs.build_number }}"