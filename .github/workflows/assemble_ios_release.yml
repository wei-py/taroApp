name: Build & Upload iOS App

# 可手动触发，也可自动触发（如 push 到 main）
on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  # ✅ 核心构建参数（可直接写死，或从 secrets 引用）
  APP_ID: ${{ secrets.IOS_APP_ID || 'com.bto.Light' }}
  APP_NAME: ${{ secrets.IOS_APP_NAME || 'BTOLIGHT' }}
  VERSION_NUMBER: ${{ secrets.IOS_VERSION_NUMBER || '2.9.0' }}
  BUILD_NUMBER: ${{ secrets.IOS_BUILD_NUMBER || github.run_number }}
  BUILD_TYPE: ${{ secrets.IOS_BUILD_TYPE || 'AppStore' }}

  # ✅ 签名 & 团队
  TEAM_ID: ${{ secrets.IOS_TEAM_ID }}
  PROVISIONING_PROFILE_SPECIFIER: ${{ secrets.IOS_PROVISIONING_PROFILE_SPECIFIER || 'BTOLIGHT' }}
  CODE_SIGN_IDENTITY: ${{ secrets.IOS_CODE_SIGN_IDENTITY || 'Apple Distribution' }}

  # ✅ 证书和 Profile（Base64 编码）
  SIGNING_CERTIFICATE_P12_DATA: ${{ secrets.IOS_SIGNING_CERTIFICATE_P12_DATA }}
  SIGNING_CERTIFICATE_PASSWORD: ${{ secrets.IOS_SIGNING_CERTIFICATE_PASSWORD }}
  PROVISIONING_PROFILE_DATA: ${{ secrets.IOS_PROVISIONING_PROFILE_DATA }}

  # ✅ App Store Connect
  APP_STORE_CONNECT_USERNAME: ${{ secrets.APP_STORE_CONNECT_USERNAME }}
  APP_STORE_CONNECT_PASSWORD: ${{ secrets.APP_STORE_CONNECT_PASSWORD }}

jobs:
  build-ios:
    runs-on: macos-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22

      - name: Set up pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 'latest'

      - name: Get pnpm store directory
        id: pnpm-cache
        run: |
          echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install React Native Dependencies
        run: |
          pnpm install --frozen-lockfile

      - name: Install Ruby and Bundler
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: 3.3.0
          bundler-cache: true

      # ✅ 新增：设置代码签名证书和 Provisioning Profile
      - name: Setup iOS Code Signing
        if: ${{ env.SIGNING_CERTIFICATE_P12_DATA != '' && env.PROVISIONING_PROFILE_DATA != '' }}
        run: |
          # 创建临时目录
          mkdir -p ~/certs
          
          # 解码并写入证书
          echo "$SIGNING_CERTIFICATE_P12_DATA" | base64 --decode > ~/certs/cert.p12
          
          # 解码并写入 Provisioning Profile
          echo "$PROVISIONING_PROFILE_DATA" | base64 --decode > ~/certs/profile.mobileprovision
          
          # 创建临时钥匙串
          security create-keychain -p "" build.keychain
          security default-keychain -s build.keychain
          security unlock-keychain -p "" build.keychain
          security set-keychain-settings -t 3600 -u build.keychain
          
          # 导入证书到钥匙串
          security import ~/certs/cert.p12 -k build.keychain -P "$SIGNING_CERTIFICATE_PASSWORD" -T /usr/bin/codesign
          security set-key-partition-list -S apple-tool:,apple: -s -k "" build.keychain
          
          # 安装 Provisioning Profile
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          cp ~/certs/profile.mobileprovision ~/Library/MobileDevice/Provisioning\ Profiles/

      - name: Install CocoaPods Dependencies
        working-directory: ./ios
        run: |
          pod install --repo-update

      - name: Build iOS App with Fastlane
        working-directory: ./ios
        run: |
          bundle exec fastlane build_app

      - name: Upload to TestFlight (if AppStore build)
        if: ${{ env.BUILD_TYPE == 'AppStore' }}
        working-directory: ./ios
        run: |
          bundle exec fastlane upload_to_testflight

      - name: Upload Artifact (IPA)
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.APP_NAME }}-${{ env.BUILD_TYPE }}-${{ env.VERSION_NUMBER }}-${{ env.BUILD_NUMBER }}
          path: ios/*.ipa

      # ✅ 新增：清理钥匙串
      - name: Cleanup
        if: always()
        run: |
          security delete-keychain build.keychain || true
          rm -rf ~/certs || true
