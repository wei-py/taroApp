require File.join(File.dirname(`node --print "require.resolve('expo/package.json')"`), "scripts/autolinking")
# Resolve react_native_pods.rb with node to allow for hoisting
require Pod::Executable.execute_command('node', ['-p',
  'require.resolve(
    "react-native/scripts/react_native_pods.rb",
    {paths: [process.argv[1]]},
  )', __dir__]).strip

platform :ios, min_ios_version_supported
prepare_react_native_project!

# If you are using a `react-native-flipper` your iOS build will fail when `NO_FLIPPER=1` is set.
# because `react-native-flipper` depends on (FlipperKit,...) that will be excluded
#
# To fix this you can also exclude `react-native-flipper` using a `react-native.config.js`
# ```js
# module.exports = {
#   dependencies: {
#     ...(process.env.NO_FLIPPER ? { 'react-native-flipper': { platforms: { ios: null } } } : {}),
# ```
flipper_config = ENV['NO_FLIPPER'] == "1" ? FlipperConfiguration.disabled : FlipperConfiguration.enabled

linkage = ENV['USE_FRAMEWORKS']
if linkage != nil
  Pod::UI.puts "Configuring Pod with #{linkage}ally linked Frameworks".green
  use_frameworks! :linkage => linkage.to_sym
end

target 'taroApp' do
  use_expo_modules!
  post_integrate do |installer|
    begin
      expo_patch_react_imports!(installer)
    rescue => e
      Pod::UI.warn e
    end
  end
  config = use_native_modules!

  use_react_native!(
    :path => config[:reactNativePath],
    # Enables Flipper.
    #
    # Note that if you have use_frameworks! enabled, Flipper will not work and
    # you should disable the next line.
    :flipper_configuration => flipper_config,
    # An absolute path to your application root.
    :app_path => "#{Pod::Config.instance.installation_root}/.."
  )

  target 'taroAppTests' do
    inherit! :complete
    # Pods for testing
  end

  post_install do |installer|
    # https://github.com/facebook/react-native/blob/main/packages/react-native/scripts/react_native_pods.rb#L197-L202
    react_native_post_install(
      installer,
      config[:reactNativePath],
      :mac_catalyst_enabled => false
    )
    
    # 修复Swift版本和优化级别冲突问题
    installer.pods_project.targets.each do |target|
      target.build_configurations.each do |config|
        # 设置Swift优化级别
        if config.build_settings['SWIFT_OPTIMIZATION_LEVEL'] == '-Onone'
          config.build_settings['SWIFT_OPTIMIZATION_LEVEL'] = '-O'
        end
        
        # 确保Swift版本一致性
        config.build_settings['SWIFT_VERSION'] = '5.0'
        
        # 禁用预览功能以避免冲突
        config.build_settings['ENABLE_PREVIEWS'] = 'NO'
        
        # 减少C++编译警告
        config.build_settings['GCC_WARN_INHIBIT_ALL_WARNINGS'] = 'YES'
        config.build_settings['CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS'] = 'NO'
        config.build_settings['CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF'] = 'NO'
        
        # 设置最低iOS版本以避免兼容性警告
        config.build_settings['IPHONEOS_DEPLOYMENT_TARGET'] = '13.0'
        
        # 禁用特定的C++警告
        config.build_settings['OTHER_CPLUSPLUSFLAGS'] = [
          '$(inherited)',
          '-Wno-deprecated-declarations',
          '-Wno-deprecated-builtins'
        ]
      end
    end
    
    # 为所有React Native相关的target设置明确的依赖关系
    installer.pods_project.targets.each do |target|
      if target.name.start_with?('React')
        target.build_configurations.each do |config|
          config.build_settings['OTHER_LDFLAGS'] = [
            '$(inherited)',
            '-lReact-jsinspector',
            '-lReact-logger',
            '-lReact-perflogger',
            '-lReactCommon',
            '-lReact-runtimescheduler',
            '-lReact-utils',
            '-lSocketRocket'
          ]
        end
      end
    end
  end
end
