name: Build & Upload iOS App

on:
  push:
    branches: [ main ]
    tags: [ v* ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  # 核心构建参数
  APP_ID: ${{ secrets.APP_ID || 'com.bto.Light' }}
  APP_NAME: ${{ secrets.APP_NAME || 'BTOLIGHT' }}
  VERSION_NUMBER: ${{ secrets.VERSION_NUMBER || '2.9.0' }}
  BUILD_NUMBER: ${{ secrets.BUILD_NUMBER || github.run_number }}
  BUILD_TYPE: ${{ secrets.BUILD_TYPE || 'AppStore' }}

  # 签名 & 团队 - 确保TEAM_ID不为空
  TEAM_ID: ${{ secrets.TEAM_ID }}
  PROVISIONING_PROFILE_SPECIFIER: ${{ secrets.PROVISIONING_PROFILE_SPECIFIER || 'BTOLIGHT' }}
  CODE_SIGN_IDENTITY: ${{ secrets.CODE_SIGN_IDENTITY || 'Apple Distribution' }}

  # 证书和 Profile（Base64 编码）
  SIGNING_CERTIFICATE_P12_DATA: ${{ secrets.SIGNING_CERTIFICATE_P12_DATA }}
  SIGNING_CERTIFICATE_PASSWORD: ${{ secrets.SIGNING_CERTIFICATE_PASSWORD }}
  PROVISIONING_PROFILE_DATA: ${{ secrets.PROVISIONING_PROFILE_DATA }}

  # App Store Connect - API Key方式（推荐）
  APP_STORE_CONNECT_API_KEY_ID: ${{ secrets.APP_STORE_CONNECT_API_KEY_ID }}
  APP_STORE_CONNECT_ISSUER_ID: ${{ secrets.APP_STORE_CONNECT_ISSUER_ID }}
  APP_STORE_CONNECT_API_KEY_CONTENT: ${{ secrets.APP_STORE_CONNECT_API_KEY_CONTENT }}

jobs:
  assemble:
    runs-on: macos-13
    steps:
      - name: Get current date
        id: date
        run: echo "::set-output name=timestamp::$(date +'%s')"
      - name: Checkout Project
        uses: actions/checkout@v3
      - uses: pnpm/action-setup@v2
        with:
          version: 10
      - uses: actions/setup-node@v3
        with:
          node-version: 22
          cache: 'pnpm'
      - run: pnpm install
      - name: Cache Pods
        uses: actions/cache@v3
        with:
          path: ios/Pods
          key: ${{ runner.os }}-pods-${{ hashFiles('**/Podfile.lock') }}
          restore-keys: |
            ${{ runner.os }}-pods-
      - name: Install pods
        run: cd ios && pod update --no-repo-update
      - name: Import signing certificate
        if: env.SIGNING_CERTIFICATE_P12_DATA != ''
        env:
          SIGNING_CERTIFICATE_P12_DATA: ${{ env.SIGNING_CERTIFICATE_P12_DATA }}
          SIGNING_CERTIFICATE_PASSWORD: ${{ env.SIGNING_CERTIFICATE_PASSWORD }}
        run: |
          set -euo pipefail
          security create-keychain -p "" build.keychain
          security list-keychains -s build.keychain
          security default-keychain -s build.keychain
          security unlock-keychain -p "" build.keychain
          security set-keychain-settings
          echo $SIGNING_CERTIFICATE_P12_DATA | base64 --decode > signingCertificate.p12
          security import signingCertificate.p12 \
                          -f pkcs12 \
                          -k build.keychain \
                          -P $SIGNING_CERTIFICATE_PASSWORD \
                          -T /usr/bin/codesign
          security set-key-partition-list -S apple-tool:,apple: -s -k "" build.keychain
      - name: Import provisioning profile
        if: env.PROVISIONING_PROFILE_DATA != ''
        env:
          PROVISIONING_PROFILE_DATA: ${{ env.PROVISIONING_PROFILE_DATA }}
        run: |
          set -euo pipefail
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          echo "$PROVISIONING_PROFILE_DATA" | base64 --decode > ~/Library/MobileDevice/Provisioning\ Profiles/profile.mobileprovision
      - name: Build app
        env:
          FL_APP_IDENTIFIER: ${{ env.APP_ID }}
          FL_UPDATE_PLIST_DISPLAY_NAME: ${{ env.APP_NAME }}
          FL_UPDATE_PLIST_PATH: taroApp/Info.plist
          FL_VERSION_NUMBER_VERSION_NUMBER: ${{ env.VERSION_NUMBER }}
          FL_BUILD_NUMBER_BUILD_NUMBER: ${{ env.BUILD_NUMBER }}.${{steps.date.outputs.timestamp}}
          FL_CODE_SIGN_IDENTITY: ${{ env.CODE_SIGN_IDENTITY }}
          FL_PROVISIONING_PROFILE_SPECIFIER: ${{ env.PROVISIONING_PROFILE_SPECIFIER }}
          FASTLANE_TEAM_ID: ${{ env.TEAM_ID }}
          NODE_PATH: ${{ github.workspace }}/node_modules/.pnpm/node_modules:$NODE_PATH
        run: |
          cd ios
          bundle update
          bundle exec fastlane build_release
      - name: Upload iOS Products
        uses: actions/upload-artifact@v4
        with:
          name: app-${{ env.BUILD_TYPE }}
          path: |
            ${{ github.workspace }}/ios/taroApp.ipa
            ${{ github.workspace }}/ios/taroApp.app.dSYM.zip
      - name: Upload app to App Store Connect
        if: env.APP_STORE_CONNECT_API_KEY_ID != '' && env.APP_STORE_CONNECT_ISSUER_ID != '' && env.APP_STORE_CONNECT_API_KEY_CONTENT != ''
        env:
          APP_STORE_CONNECT_API_KEY_ID: ${{ env.APP_STORE_CONNECT_API_KEY_ID }}
          APP_STORE_CONNECT_ISSUER_ID: ${{ env.APP_STORE_CONNECT_ISSUER_ID }}
          APP_STORE_CONNECT_API_KEY_CONTENT: ${{ env.APP_STORE_CONNECT_API_KEY_CONTENT }}
        run: |
          cd ios
          bundle exec fastlane upload_to_app_store
      - name: Rename release assets
        if: startsWith(github.ref, 'refs/tags/')
        run: |
          mv ios/taroApp.ipa ios/app-${{ env.BUILD_TYPE }}.ipa
          mv ios/taroApp.app.dSYM.zip ios/app-${{ env.BUILD_TYPE }}.app.dSYM.zip
      - name: Upload release assets
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/')
        with:
          prerelease: ${{ contains(github.ref, 'beta') }}
          files: |
            ios/app-${{ env.BUILD_TYPE }}.ipa
            ios/app-${{ env.BUILD_TYPE }}.app.dSYM.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  